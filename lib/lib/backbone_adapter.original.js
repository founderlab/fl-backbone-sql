// Generated by CoffeeScript 1.12.7

/*
  backbone-sql.js 0.6.5
  Copyright (c) 2013 Vidigami - https://github.com/vidigami/backbone-sql
  License: MIT (http://www.opensource.org/licenses/mit-license.php)
 */

(function() {
  var SqlBackboneAdapter, _;

  _ = require('backbone-orm')._;

  module.exports = SqlBackboneAdapter = (function() {
    function SqlBackboneAdapter() {}

    SqlBackboneAdapter.nativeToAttributes = function(json, schema) {
      var err, foreign_key, key, ref, ref1, ref2, ref3, ref4, relation, value;
      ref = schema.fields;
      for (key in ref) {
        value = ref[key];
        if (schema.fields[key] && schema.fields[key].type === 'Boolean' && json[key] !== null) {
          json[key] = !!json[key];
        } else if (((ref1 = value.type) != null ? ref1.toLowerCase() : void 0) === 'json' && json[key] && _.isString(json[key])) {
          try {
            json[key] = JSON.parse(json[key]);
          } catch (error) {
            err = error;
          }
        } else if (((ref2 = (ref3 = value.type) != null ? ref3.toLowerCase() : void 0) === 'float' || ref2 === 'decimal') && json[key] && _.isString(json[key])) {
          json[key] = +json[key];
        }
      }
      for (key in json) {
        value = json[key];
        if (key.endsWith('_id') && value) {
          json[key] = value.toString();
        }
      }
      if (json.id) {
        json.id = json.id.toString();
      }
      ref4 = schema.relations;
      for (key in ref4) {
        relation = ref4[key];
        if (relation.type === 'belongsTo') {
          foreign_key = relation.foreign_key;
        }
        if (foreign_key && json[foreign_key]) {
          json[foreign_key] = json[foreign_key].toString();
        }
      }
      return json;
    };

    return SqlBackboneAdapter;

  })();

}).call(this);
