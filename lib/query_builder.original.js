// Generated by CoffeeScript 1.12.7
(function() {
  var _, appendLimits, appendRelatedWhere, appendSelect, appendSort, appendWhere, buildQueryFromAst, joinToRelation;

  _ = require('lodash');

  module.exports = buildQueryFromAst = function(query, ast, options) {
    var hasInclude, join, join_options, key, ref;
    if (options == null) {
      options = {};
    }
    appendWhere(query, ast.where);
    hasInclude = false;
    ref = ast.joins;
    for (key in ref) {
      join = ref[key];
      join_options = {
        pivot_only: join.pivot_only && !(join.include || join.condition)
      };
      if (join.include) {
        joinToRelation(query, join.relation, join_options);
        hasInclude = true;
      }
    }
    if (ast.count || options.count) {
      return query.count('*');
    }
    if (ast.exists || options.exists) {
      return query.count('*').limit(1);
    }
    if (!hasInclude) {
      appendLimits(query, ast.limit, ast.offset);
    }
    if (!options.skipSelect) {
      appendSelect(query, ast);
    }
    appendSort(query, ast);
    return query;
  };

  joinToRelation = function(query, relation, options) {
    var from_key, from_table, model_type, pivot_from_key, pivot_table, pivot_to_key, relation_model_type, to_key, to_table;
    if (options == null) {
      options = {};
    }
    model_type = relation.model_type;
    relation_model_type = relation.reverse_model_type;
    from_table = model_type.tableName();
    to_table = relation_model_type.tableName();
    if (relation.type === 'hasMany' && relation.reverse_relation.type === 'hasMany') {
      pivot_table = relation.join_table.tableName();
      from_key = from_table + ".id";
      pivot_to_key = pivot_table + "." + relation.foreign_key;
      query.leftOuterJoin(pivot_table, from_key, '=', pivot_to_key);
      if (!options.pivot_only) {
        pivot_from_key = pivot_table + "." + relation.reverse_relation.foreign_key;
        to_key = to_table + ".id";
        return query.leftOuterJoin(to_table, pivot_from_key, '=', to_key);
      }
    } else {
      if (relation.type === 'belongsTo') {
        from_key = from_table + "." + relation.foreign_key;
        to_key = to_table + ".id";
      } else {
        from_key = from_table + ".id";
        to_key = to_table + "." + relation.foreign_key;
      }
      return query.leftOuterJoin(to_table, from_key, '=', to_key);
    }
  };

  appendRelatedWhere = function(query, condition, options) {
    var from_key, from_model_type, in_method, select, table;
    if (options == null) {
      options = {};
    }
    from_model_type = condition.relation.model_type;
    table = condition.model_type.tableName();
    if (condition.relation.type === 'belongsTo') {
      from_key = (from_model_type.tableName()) + "." + condition.relation.reverse_relation.foreign_key;
      select = (condition.relation.reverse_model_type.tableName()) + ".id";
    } else {
      from_key = (from_model_type.tableName()) + ".id";
      select = condition.relation.reverse_relation.foreign_key;
    }
    in_method = condition.method === 'orWhere' ? 'orWhereIn' : 'whereIn';
    if (condition.operator) {
      return query[in_method](from_key, function() {
        var q;
        q = this;
        if (condition.value) {
          return this.select(select).from(table)[condition.method](condition.key, condition.operator, condition.value);
        } else if (condition.dot_where) {
          this.select(select).from(table);
          return appendRelatedWhere(q, condition.dot_where, options);
        }
      });
    } else {
      return query[in_method](from_key, function() {
        var q;
        q = this;
        if (condition.value) {
          return this.select(select).from(table)[condition.method](condition.key, condition.value);
        } else if (condition.dot_where) {
          this.select(select).from(table);
          return appendRelatedWhere(q, condition.dot_where, options);
        }
      });
    }
  };

  appendWhere = function(query, condition, options) {
    var from_key, from_model_type, from_table, pivot_from_key, pivot_table, pivot_to_key, ref, relation_model_type, relation_table, to_key, to_table;
    if (options == null) {
      options = {};
    }
    if (!_.isUndefined(condition.key) || condition.dot_where) {
      if (condition.relation) {
        if (condition.relation.type === 'hasMany' && condition.relation.reverse_relation.type === 'hasMany') {
          relation_table = condition.key.split('.').shift();
          from_model_type = condition.relation.model_type;
          relation_model_type = condition.relation.reverse_model_type;
          from_table = from_model_type.tableName();
          to_table = relation_model_type.tableName();
          pivot_table = condition.relation.join_table.tableName();
          from_key = from_table + ".id";
          pivot_to_key = pivot_table + "." + condition.relation.foreign_key;
          pivot_from_key = pivot_table + "." + condition.relation.reverse_relation.foreign_key;
          to_key = to_table + ".id";
          to_table = "" + to_table;
          if (condition.operator) {
            query.whereIn(from_key, function() {
              return this.select(pivot_to_key).from(pivot_table).whereIn(pivot_from_key, function() {
                return this.select('id').from(to_table)[condition.method](condition.key, condition.operator, condition.value);
              });
            });
          } else {
            query.whereIn(from_key, function() {
              return this.select(pivot_to_key).from(pivot_table).whereIn(pivot_from_key, function() {
                return this.select('id').from(to_table)[condition.method](condition.key, condition.value);
              });
            });
          }
        } else {
          appendRelatedWhere(query, condition, options);
        }
      } else {
        if (condition.operator) {
          query[condition.method](condition.key, condition.operator, condition.value);
        } else {
          query[condition.method](condition.key, condition.value);
        }
      }
    } else if ((ref = condition.conditions) != null ? ref.length : void 0) {
      query[condition.method](function() {
        var c, i, len, ref1, results, sub_query;
        sub_query = this;
        ref1 = condition.conditions;
        results = [];
        for (i = 0, len = ref1.length; i < len; i++) {
          c = ref1[i];
          results.push(appendWhere(sub_query, c));
        }
        return results;
      });
    }
    return query;
  };

  appendSelect = function(query, ast) {
    query.select(ast.select);
    return query;
  };

  appendSort = function(query, ast) {
    var i, len, ref, sort;
    if (!ast.sort) {
      return query;
    }
    ref = ast.sort;
    for (i = 0, len = ref.length; i < len; i++) {
      sort = ref[i];
      query.orderBy(sort.column, sort.direction);
    }
    return query;
  };

  appendLimits = function(query, limit, offset) {
    if (limit) {
      query.limit(limit);
    }
    if (offset) {
      query.offset(offset);
    }
    return query;
  };

}).call(this);
